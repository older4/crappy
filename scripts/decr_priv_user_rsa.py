import sys
import os
import struct
from Crypto.Cipher import Salsa20
from wincrypt import CryptImportKey, CryptDecrypt
from tools import get_ransom_data, get_ransom_ver

if len(sys.argv) <= 2:
    print("Usage: %s ransom.txt rsa_user_private_file" %sys.argv[0], file=sys.stderr)
    sys.exit(1)

ransom_path, out_path = sys.argv[1], sys.argv[2]

ransom_ver = get_ransom_ver(ransom_path, "GANDCRAB KEY")
print("[+] GandCrab version: V"+ str(ransom_ver))
# load master key
if(4 <= ransom_ver < 5.04):
    rsa_master_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "rsa_keys","rsa_master_priv_4-5")
elif(5.04 <= ransom_ver <5.2):
    rsa_master_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "rsa_keys","rsa_master_priv_5_0_4-5_1")
elif(5.2 <= ransom_ver):
    rsa_master_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),"rsa_keys", "rsa_master_priv_5_2")
else:
    print("[X] ERROR: Not supported version gandcrab file inputted.", file=sys.stderr)
    sys.exit(1)

priv = CryptImportKey(open(rsa_master_path, "rb").read())

if priv is None:
    print("[X] ERROR: unable to read private RSA master key", file=sys.stderr)
    sys.exit(1)

rkey = get_ransom_data(ransom_path, "GANDCRAB KEY")
privateKeySize = struct.unpack("<I", rkey[:4])[0]
print("[+] Priv key size: %d" % privateKeySize)
# Next 256 bytes are RSA-encrypted salsa key
salsakey = rkey[4:(4+256)]

salsakey = CryptDecrypt(priv, salsakey)[:32]
print("[+] Salsa key: %s" % salsakey.hex())
# Next 256 bytes are RSA-encrypted
salsanonce = rkey[(4+256):(4+2*256)]

salsanonce = CryptDecrypt(priv, salsanonce)[:8]
print("[+] Salsa nonce: %s" % salsanonce.hex())

print("[+] Decrypting RSA private user key...")
encrRsaPriv = rkey[(4+2*256):]

assert(len(encrRsaPriv) == privateKeySize)

rsaPriv = Salsa20.new(key=salsakey, nonce=salsanonce).decrypt(encrRsaPriv)
PK = CryptImportKey(rsaPriv)
if not PK.valid:
    print("[X] ERROR: invalid RSA private key after decryption. Has this ransom been generated by Gandcrab V4-V5.4?")
    sys.exit(1)

print("[+] RSA private key details:")
print("[+] p  = %s" % hex(PK.p))
print("[+] q  = %s" % hex(PK.q))
print("[+] d  = %s" % hex(PK.d))
print("[+] dp = %s" % hex(PK.dP))
print("[+] dq = %s" % hex(PK.dQ))
print("[+] iq = %s" % hex(PK.iQ))
print("[+] N  = %s" % hex(PK.N))

open(out_path, "wb").write(rsaPriv)

print("[+] RSA private user key written to '%s'" % out_path)
